// Code generated by mockery v1.0.0. DO NOT EDIT.

// Copyright 2019 ProximaX Limited. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file.

package websocket

import (
	"context"

	"github.com/proximax-storage/go-xpx-chain-sdk/sdk/websocket/subs"
	mock "github.com/stretchr/testify/mock"
)

// MockMessagePublisher is an autogenerated mock type for the MessagePublisher type
type MockSubscribersPool[T any] struct {
	mock.Mock
}

func (_m *MockSubscribersPool[T]) Notify(ctx context.Context, path *subs.Path, payload []byte) error {
	ret := _m.Called(ctx, path, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subs.Path, []byte) error); ok {
		r0 = rf(ctx, path, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func (_m *MockSubscribersPool[T]) NewSubscription(path *subs.Path) (<-chan T, int) {
	ret := _m.Called(path)

	var r0 <-chan T
	if ret.Get(0) != nil {
		r0 = ret.Get(0).(<-chan T)
	}

	return r0, ret.Int(1)
}

func (_m *MockSubscribersPool[T]) CloseSubscription(path *subs.Path, id int) {
	_m.Called(path, id)
}

func (_m *MockSubscribersPool[T]) GetPaths() []string {
	ret := _m.Called()

	var r0 []string
	if ret.Get(0) != nil {
		r0 = ret.Get(0).([]string)
	}

	return r0
}

func (_m *MockSubscribersPool[T]) HasSubscriptions(path *subs.Path) bool {
	ret := _m.Called(path)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*subs.Path) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Bool(0)
	}

	return r0
}

//func (m *MockSubscribersPool[T]) Notify(ctx context.Context, path *subs.Path, payload []byte) error {
//	args := m.Called(ctx, path, payload)
//	return args.Error(0)
//}
//
//func (m *MockSubscribersPool[T]) NewSubscription(path *subs.Path) (_ <-chan T, id int) {
//	args := m.Called(path)
//	return args.Get(0).(<-chan T), args.Int(1)
//}
//
//func (m *MockSubscribersPool[T]) CloseSubscription(path *subs.Path, id int) {
//	m.Called(path, id)
//}
//
//func (m *MockSubscribersPool[T]) GetPaths() []string {
//	args := m.Called()
//	return args.Get(0).([]string)
//}
//
//func (m *MockSubscribersPool[T]) HasSubscriptions(path *subs.Path) bool {
//	args := m.Called(path)
//	return args.Bool(0)
//}
