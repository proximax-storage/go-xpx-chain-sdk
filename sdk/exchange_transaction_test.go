// Copyright 2018 ProximaX Limited. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file.

package sdk

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

var (
	addExchangeOfferTransactionSerializationCorr = []byte{0x9c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x90, 0x5d, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0xfd, 0x56, 0x0, 0x0, 0x0, 0x0, 0x1, 0x5, 0xab, 0x7f, 0x7, 0x7b, 0x32, 0x7b, 0x83, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}

	addExchangeOfferTransactionToAggregateCorr = []byte{0x4c, 0x0, 0x0, 0x0, 0x9a, 0x49, 0x36, 0x64, 0x6, 0xac, 0xa9, 0x52, 0xb8, 0x8b, 0xad, 0xf5, 0xf1, 0xe9, 0xbe, 0x6c, 0xe4, 0x96, 0x81, 0x41, 0x3, 0x5a, 0x60, 0xbe, 0x50, 0x32, 0x73, 0xea, 0x65, 0x45, 0x6b, 0x24, 0x4, 0x0, 0x0, 0x90, 0x5d, 0x41, 0x1, 0x5, 0xab, 0x7f, 0x7, 0x7b, 0x32, 0x7b, 0x83, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}

	addExchangeOfferTransactionSigningCorr = "9C0000004D9B9291FD000022A959E8DC0A137957E6E01CC915DA3F1BBD10325B051940BD6EC509B0A8F48C51A7F168C8D0003681AC70D6FD481038FC67C98D782987DE071026D70E1954775749C6811084D6450A3184D977383F0E4282CD47118AF37755040000905D41000000000000000000BAFD56000000000105AB7F077B327B8302000000000000000200000000000000000100000000000000"

	exchangeOfferTransactionSerializationCorr = []byte{0xb4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x90, 0x5d, 0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0xfd, 0x56, 0x0, 0x0, 0x0, 0x0, 0x1, 0x5, 0xab, 0x7f, 0x7, 0x7b, 0x32, 0x7b, 0x83, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9a, 0x49, 0x36, 0x64, 0x6, 0xac, 0xa9, 0x52, 0xb8, 0x8b, 0xad, 0xf5, 0xf1, 0xe9, 0xbe, 0x6c, 0xe4, 0x96, 0x81, 0x41, 0x3, 0x5a, 0x60, 0xbe, 0x50, 0x32, 0x73, 0xea, 0x65, 0x45, 0x6b, 0x24}

	exchangeOfferTransactionToAggregateCorr = []byte{0x64, 0x0, 0x0, 0x0, 0x9a, 0x49, 0x36, 0x64, 0x6, 0xac, 0xa9, 0x52, 0xb8, 0x8b, 0xad, 0xf5, 0xf1, 0xe9, 0xbe, 0x6c, 0xe4, 0x96, 0x81, 0x41, 0x3, 0x5a, 0x60, 0xbe, 0x50, 0x32, 0x73, 0xea, 0x65, 0x45, 0x6b, 0x24, 0x2, 0x0, 0x0, 0x90, 0x5d, 0x42, 0x1, 0x5, 0xab, 0x7f, 0x7, 0x7b, 0x32, 0x7b, 0x83, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xdd, 0x49, 0x36, 0x64, 0x6, 0xac, 0xa9, 0x52, 0xb8, 0x8b, 0xad, 0xf5, 0xf1, 0xe9, 0xbe, 0x6c, 0xe4, 0x96, 0x81, 0x41, 0x3, 0x5a, 0x60, 0xbe, 0x50, 0x32, 0x73, 0xea, 0x65, 0x45, 0x6b, 0x24}

	exchangeOfferTransactionSigningCorr = "B4000000E7F664102831EF73298B151ACEB93EDF5CDA4379FE2C9D5BC65717B6D07478B9881A71EF98F60078801A0264AD532C1E41B434A828586D46E99045212209DA0C1026D70E1954775749C6811084D6450A3184D977383F0E4282CD47118AF37755020000905D42000000000000000000BAFD56000000000105AB7F077B327B8302000000000000000200000000000000009A49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24"

	removeExchangeOfferTransactionSerializationCorr = []byte{0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x90, 0x5d, 0x43, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0xfd, 0x56, 0x0, 0x0, 0x0, 0x0, 0x1, 0x5, 0xab, 0x7f, 0x7, 0x7b, 0x32, 0x7b, 0x83, 0x0}

	removeExchangeOfferTransactionToAggregateCorr = []byte{0x34, 0x0, 0x0, 0x0, 0x9a, 0x49, 0x36, 0x64, 0x6, 0xac, 0xa9, 0x52, 0xb8, 0x8b, 0xad, 0xf5, 0xf1, 0xe9, 0xbe, 0x6c, 0xe4, 0x96, 0x81, 0x41, 0x3, 0x5a, 0x60, 0xbe, 0x50, 0x32, 0x73, 0xea, 0x65, 0x45, 0x6b, 0x24, 0x2, 0x0, 0x0, 0x90, 0x5d, 0x43, 0x1, 0x5, 0xab, 0x7f, 0x7, 0x7b, 0x32, 0x7b, 0x83, 0x0}

	removeExchangeOfferTransactionSigningCorr = "84000000B59228531292CCF3BD92E013AB9B67E6A778E923A38D10D725CAB2CC58872C60C4B4531AA51365B30546CBB462F9648BBA99FBEE82B2D74D56EF417585C290001026D70E1954775749C6811084D6450A3184D977383F0E4282CD47118AF37755020000905D43000000000000000000BAFD56000000000105AB7F077B327B8300"
)

func TestAddExchangeOfferTransactionSerialization(t *testing.T) {
	tx, err := NewAddExchangeOfferTransaction(
		fakeDeadline,
		[]*AddOffer{
			{
				Offer: Offer{
					Type:   SellOffer,
					Cost:   Amount(2),
					Mosaic: newMosaicPanic(StorageNamespaceId, Amount(2)),
				},
				Duration: Duration(1),
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewAddExchangeOfferTransaction returned error: %s", err)

	b, err := tx.Bytes()

	assert.Nilf(t, err, "AddExchangeOfferTransaction.Bytes returned error: %s", err)
	assert.Equal(t, addExchangeOfferTransactionSerializationCorr, b)
}

func TestAddExchangeOfferTransactionToAggregate(t *testing.T) {
	p, err := NewAccountFromPublicKey("9A49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24", MijinTest)
	tx, err := NewAddExchangeOfferTransaction(
		fakeDeadline,
		[]*AddOffer{
			{
				Offer: Offer{
					Type:   SellOffer,
					Cost:   Amount(2),
					Mosaic: newMosaicPanic(StorageNamespaceId, Amount(2)),
				},
				Duration: Duration(1),
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewAddExchangeOfferTransaction returned error: %s", err)
	tx.Signer = p

	b, err := toAggregateTransactionBytes(tx)

	assert.Nilf(t, err, "toAggregateTransactionBytes returned error: %s", err)
	assert.Equal(t, addExchangeOfferTransactionToAggregateCorr, b)
}

func TestAddExchangeOfferTransactionSigning(t *testing.T) {
	acc, err := NewAccountFromPrivateKey("787225aaff3d2c71f4ffa32d4f19ec4922f3cd869747f267378f81f8e3fcb12d", MijinTest, GenerationHash, 1)
	assert.Nil(t, err)

	tx, err := NewAddExchangeOfferTransaction(
		fakeDeadline,
		[]*AddOffer{
			{
				Offer: Offer{
					Type:   SellOffer,
					Cost:   Amount(2),
					Mosaic: newMosaicPanic(StorageNamespaceId, Amount(2)),
				},
				Duration: Duration(1),
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewAddExchangeOfferTransaction returned error: %s", err)

	b, err := acc.Sign(tx)

	assert.Nilf(t, err, "Sign returned error: %s", err)
	assert.Equal(t, addExchangeOfferTransactionSigningCorr, b.Payload)
	assert.Equal(t, stringToHashPanic("4358cf23f9659ba0bb2a3bc49e3216959c8296911c59c193931236d8fbf902e4"), b.Hash)
}

func TestExchangeOfferTransactionSerialization(t *testing.T) {
	owner, err := NewAccountFromPublicKey("9A49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24", MijinTest)
	assert.Nil(t, err)
	tx, err := NewExchangeOfferTransaction(
		fakeDeadline,
		[]*ExchangeConfirmation{
			{
				Offer: Offer{
					Type:   SellOffer,
					Cost:   Amount(2),
					Mosaic: newMosaicPanic(StorageNamespaceId, Amount(2)),
				},
				Owner: owner,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewExchangeOfferTransaction returned error: %s", err)

	b, err := tx.Bytes()

	assert.Nilf(t, err, "ExchangeOfferTransaction.Bytes returned error: %s", err)
	assert.Equal(t, exchangeOfferTransactionSerializationCorr, b)
}

func TestExchangeOfferTransactionToAggregate(t *testing.T) {
	p, err := NewAccountFromPublicKey("9A49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24", MijinTest)
	assert.Nil(t, err)

	owner, err := NewAccountFromPublicKey("DD49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24", MijinTest)
	assert.Nil(t, err)
	tx, err := NewExchangeOfferTransaction(
		fakeDeadline,
		[]*ExchangeConfirmation{
			{
				Offer: Offer{
					Type:   SellOffer,
					Cost:   Amount(2),
					Mosaic: newMosaicPanic(StorageNamespaceId, Amount(2)),
				},
				Owner: owner,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewExchangeOfferTransaction returned error: %s", err)
	tx.Signer = p

	b, err := toAggregateTransactionBytes(tx)

	assert.Nilf(t, err, "toAggregateTransactionBytes returned error: %s", err)
	assert.Equal(t, exchangeOfferTransactionToAggregateCorr, b)
}

func TestExchangeOfferTransactionSigning(t *testing.T) {
	acc, err := NewAccountFromPrivateKey("787225aaff3d2c71f4ffa32d4f19ec4922f3cd869747f267378f81f8e3fcb12d", MijinTest, GenerationHash, 1)
	assert.Nil(t, err)

	owner, err := NewAccountFromPublicKey("9A49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24", MijinTest)
	assert.Nil(t, err)
	tx, err := NewExchangeOfferTransaction(
		fakeDeadline,
		[]*ExchangeConfirmation{
			{
				Offer: Offer{
					Type:   SellOffer,
					Cost:   Amount(2),
					Mosaic: newMosaicPanic(StorageNamespaceId, Amount(2)),
				},
				Owner: owner,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewExchangeOfferTransaction returned error: %s", err)

	b, err := acc.Sign(tx)

	assert.Nilf(t, err, "Sign returned error: %s", err)
	assert.Equal(t, exchangeOfferTransactionSigningCorr, b.Payload)
	assert.Equal(t, stringToHashPanic("eb36339c2ef577f57be656054743fe98be70017b210ed9a8e26b7c83230e806f"), b.Hash)
}

func TestRemoveExchangeOfferTransactionSerialization(t *testing.T) {
	tx, err := NewRemoveExchangeOfferTransaction(
		fakeDeadline,
		[]*RemoveOffer{
			{
				Type:    SellOffer,
				AssetId: StorageNamespaceId,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewRemoveExchangeOfferTransaction returned error: %s", err)

	b, err := tx.Bytes()

	assert.Nilf(t, err, "RemoveExchangeOfferTransaction.Bytes returned error: %s", err)
	assert.Equal(t, removeExchangeOfferTransactionSerializationCorr, b)
}

func TestRemoveExchangeOfferTransactionToAggregate(t *testing.T) {
	p, err := NewAccountFromPublicKey("9A49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24", MijinTest)
	assert.Nil(t, err)

	tx, err := NewRemoveExchangeOfferTransaction(
		fakeDeadline,
		[]*RemoveOffer{
			{
				Type:    SellOffer,
				AssetId: StorageNamespaceId,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewRemoveExchangeOfferTransaction returned error: %s", err)
	tx.Signer = p

	b, err := toAggregateTransactionBytes(tx)

	assert.Nilf(t, err, "toAggregateTransactionBytes returned error: %s", err)
	assert.Equal(t, removeExchangeOfferTransactionToAggregateCorr, b)
}

func TestRemoveExchangeOfferTransactionSigning(t *testing.T) {
	acc, err := NewAccountFromPrivateKey("787225aaff3d2c71f4ffa32d4f19ec4922f3cd869747f267378f81f8e3fcb12d", MijinTest, GenerationHash, 1)
	assert.Nil(t, err)

	tx, err := NewRemoveExchangeOfferTransaction(
		fakeDeadline,
		[]*RemoveOffer{
			{
				Type:    SellOffer,
				AssetId: StorageNamespaceId,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewRemoveExchangeOfferTransaction returned error: %s", err)

	b, err := acc.Sign(tx)

	assert.Nilf(t, err, "Sign returned error: %s", err)
	assert.Equal(t, removeExchangeOfferTransactionSigningCorr, b.Payload)
	assert.Equal(t, stringToHashPanic("db3c0c441b4c7ba353095e8e38b90470256bf49284a4b6c3eb686fbb00efcce7"), b.Hash)
}
