// Copyright 2018 ProximaX Limited. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file.

package sdk

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

var (
	prepareDriveTransactionSerializationCorr = []byte{0xbf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x90, 0x5a, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0xfd, 0x56, 0x0, 0x0, 0x0, 0x0, 0xce, 0x2, 0x70, 0x4f, 0xab, 0x5, 0xd5, 0xbb, 0x89, 0x81, 0x39, 0x7d, 0x56, 0x3f, 0x7c, 0xc9, 0x31, 0x28, 0x64, 0xf0, 0x65, 0x19, 0x5e, 0x3d, 0xb8, 0xe0, 0x84, 0x7d, 0x9f, 0x20, 0x79, 0x21, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x64}

	prepareDriveTransactionToAggregateCorr = []byte{0x6f, 0x0, 0x0, 0x0, 0xce, 0x2, 0x70, 0x4f, 0xab, 0x5, 0xd5, 0xbb, 0x89, 0x81, 0x39, 0x7d, 0x56, 0x3f, 0x7c, 0xc9, 0x31, 0x28, 0x64, 0xf0, 0x65, 0x19, 0x5e, 0x3d, 0xb8, 0xe0, 0x84, 0x7d, 0x9f, 0x20, 0x79, 0x21, 0x3, 0x0, 0x0, 0x90, 0x5a, 0x41, 0xce, 0x2, 0x70, 0x4f, 0xab, 0x5, 0xd5, 0xbb, 0x89, 0x81, 0x39, 0x7d, 0x56, 0x3f, 0x7c, 0xc9, 0x31, 0x28, 0x64, 0xf0, 0x65, 0x19, 0x5e, 0x3d, 0xb8, 0xe0, 0x84, 0x7d, 0x9f, 0x20, 0x79, 0x21, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x64}

	prepareDriveTransactionSigningCorr = "BF0000008CA330AA19A9975BE3368D5074E31E697A5EE5FAF8EA786A993953B9E60266BC05DCE7A3D052D5D48E1D4C2B5A7BB95403DACA23D745131D44A1CA9ED3239309CE02704FAB05D5BB8981397D563F7CC9312864F065195E3DB8E0847D9F207921030001905A41000000000000000000BAFD5600000000CE02704FAB05D5BB8981397D563F7CC9312864F065195E3DB8E0847D9F20792101000000000000000100000000000000010000000000000001000000000000000100010064"

	joinToDriveTransactionSerializationCorr = []byte{0x9a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x90, 0x5a, 0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0xfd, 0x56, 0x0, 0x0, 0x0, 0x0, 0xfc, 0x5c, 0xdb, 0x24, 0x78, 0x11, 0x7f, 0x48, 0xba, 0xc, 0x16, 0x87, 0x17, 0x8e, 0xf6, 0x9c, 0x1, 0x6b, 0xba, 0x89, 0xd3, 0x42, 0xc1, 0xac, 0xd1, 0x55, 0xe1, 0xf5, 0xae, 0xf, 0x47, 0x27}

	joinToDriveTransactionToAggregateCorr = []byte{0x4a, 0x0, 0x0, 0x0, 0xce, 0x2, 0x70, 0x4f, 0xab, 0x5, 0xd5, 0xbb, 0x89, 0x81, 0x39, 0x7d, 0x56, 0x3f, 0x7c, 0xc9, 0x31, 0x28, 0x64, 0xf0, 0x65, 0x19, 0x5e, 0x3d, 0xb8, 0xe0, 0x84, 0x7d, 0x9f, 0x20, 0x79, 0x21, 0x1, 0x0, 0x0, 0x90, 0x5a, 0x42, 0xfc, 0x5c, 0xdb, 0x24, 0x78, 0x11, 0x7f, 0x48, 0xba, 0xc, 0x16, 0x87, 0x17, 0x8e, 0xf6, 0x9c, 0x1, 0x6b, 0xba, 0x89, 0xd3, 0x42, 0xc1, 0xac, 0xd1, 0x55, 0xe1, 0xf5, 0xae, 0xf, 0x47, 0x27}

	joinToDriveTransactionSigningCorr = "9A00000066E45B50A4586C04E7C8DCEB9BE5901F4FBD6C134669222E5C8037FCC8CD0EE21CB950E39B1187A74FCF0044061C8067FFB7A3992ABC18C6D88E595E76855107CE02704FAB05D5BB8981397D563F7CC9312864F065195E3DB8E0847D9F207921010001905A42000000000000000000BAFD5600000000FC5CDB2478117F48BA0C1687178EF69C016BBA89D342C1ACD155E1F5AE0F4727"

	driveFileSystemTransactionSerializationCorr = []byte{0x2e, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x90, 0x5a, 0x43, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0xfd, 0x56, 0x0, 0x0, 0x0, 0x0, 0xfc, 0x5c, 0xdb, 0x24, 0x78, 0x11, 0x7f, 0x48, 0xba, 0xc, 0x16, 0x87, 0x17, 0x8e, 0xf6, 0x9c, 0x1, 0x6b, 0xba, 0x89, 0xd3, 0x42, 0xc1, 0xac, 0xd1, 0x55, 0xe1, 0xf5, 0xae, 0xf, 0x47, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}

	driveFileSystemTransactionToAggregateCorr = []byte{0xde, 0x0, 0x0, 0x0, 0xce, 0x2, 0x70, 0x4f, 0xab, 0x5, 0xd5, 0xbb, 0x89, 0x81, 0x39, 0x7d, 0x56, 0x3f, 0x7c, 0xc9, 0x31, 0x28, 0x64, 0xf0, 0x65, 0x19, 0x5e, 0x3d, 0xb8, 0xe0, 0x84, 0x7d, 0x9f, 0x20, 0x79, 0x21, 0x1, 0x0, 0x0, 0x90, 0x5a, 0x43, 0xfc, 0x5c, 0xdb, 0x24, 0x78, 0x11, 0x7f, 0x48, 0xba, 0xc, 0x16, 0x87, 0x17, 0x8e, 0xf6, 0x9c, 0x1, 0x6b, 0xba, 0x89, 0xd3, 0x42, 0xc1, 0xac, 0xd1, 0x55, 0xe1, 0xf5, 0xae, 0xf, 0x47, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}

	driveFileSystemTransactionSigningCorr

	filesDepositTransactionSerializationCorr = []byte{0xbc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x90, 0x5a, 0x44, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0xfd, 0x56, 0x0, 0x0, 0x0, 0x0, 0xfc, 0x5c, 0xdb, 0x24, 0x78, 0x11, 0x7f, 0x48, 0xba, 0xc, 0x16, 0x87, 0x17, 0x8e, 0xf6, 0x9c, 0x1, 0x6b, 0xba, 0x89, 0xd3, 0x42, 0xc1, 0xac, 0xd1, 0x55, 0xe1, 0xf5, 0xae, 0xf, 0x47, 0x27, 0x1, 0x0, 0xaa, 0x2d, 0x24, 0x27, 0xe1, 0x5, 0xa9, 0xb6, 0xd, 0xf6, 0x34, 0x55, 0x38, 0x49, 0x13, 0x5d, 0xf6, 0x29, 0xf1, 0x40, 0x8a, 0x1, 0x8d, 0x2, 0xb0, 0x7a, 0x70, 0xca, 0xff, 0xb4, 0x30, 0x93}

	filesDepositTransactionToAggregateCorr = []byte{0x6c, 0x0, 0x0, 0x0, 0xce, 0x2, 0x70, 0x4f, 0xab, 0x5, 0xd5, 0xbb, 0x89, 0x81, 0x39, 0x7d, 0x56, 0x3f, 0x7c, 0xc9, 0x31, 0x28, 0x64, 0xf0, 0x65, 0x19, 0x5e, 0x3d, 0xb8, 0xe0, 0x84, 0x7d, 0x9f, 0x20, 0x79, 0x21, 0x1, 0x0, 0x0, 0x90, 0x5a, 0x44, 0xfc, 0x5c, 0xdb, 0x24, 0x78, 0x11, 0x7f, 0x48, 0xba, 0xc, 0x16, 0x87, 0x17, 0x8e, 0xf6, 0x9c, 0x1, 0x6b, 0xba, 0x89, 0xd3, 0x42, 0xc1, 0xac, 0xd1, 0x55, 0xe1, 0xf5, 0xae, 0xf, 0x47, 0x27, 0x1, 0x0, 0xaa, 0x2d, 0x24, 0x27, 0xe1, 0x5, 0xa9, 0xb6, 0xd, 0xf6, 0x34, 0x55, 0x38, 0x49, 0x13, 0x5d, 0xf6, 0x29, 0xf1, 0x40, 0x8a, 0x1, 0x8d, 0x2, 0xb0, 0x7a, 0x70, 0xca, 0xff, 0xb4, 0x30, 0x93}

	filesDepositTransactionSigningCorr = "BC00000009320D539E4FC4170F50D97F3CD0B9267F8E2895E607180221AF39B9C0632B4CA4063CBA447E13427F8D13390CF9D53303576771BBC094B5D503608745F5CA06CE02704FAB05D5BB8981397D563F7CC9312864F065195E3DB8E0847D9F207921010001905A44000000000000000000BAFD5600000000FC5CDB2478117F48BA0C1687178EF69C016BBA89D342C1ACD155E1F5AE0F47270100AA2D2427E105A9B60DF634553849135DF629F1408A018D02B07A70CAFFB43093"

	endDriveTransactionSerializationCorr = []byte{0x9a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x90, 0x5a, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0xfd, 0x56, 0x0, 0x0, 0x0, 0x0, 0xfc, 0x5c, 0xdb, 0x24, 0x78, 0x11, 0x7f, 0x48, 0xba, 0xc, 0x16, 0x87, 0x17, 0x8e, 0xf6, 0x9c, 0x1, 0x6b, 0xba, 0x89, 0xd3, 0x42, 0xc1, 0xac, 0xd1, 0x55, 0xe1, 0xf5, 0xae, 0xf, 0x47, 0x27}

	endDriveTransactionToAggregateCorr = []byte{0x4a, 0x0, 0x0, 0x0, 0xce, 0x2, 0x70, 0x4f, 0xab, 0x5, 0xd5, 0xbb, 0x89, 0x81, 0x39, 0x7d, 0x56, 0x3f, 0x7c, 0xc9, 0x31, 0x28, 0x64, 0xf0, 0x65, 0x19, 0x5e, 0x3d, 0xb8, 0xe0, 0x84, 0x7d, 0x9f, 0x20, 0x79, 0x21, 0x1, 0x0, 0x0, 0x90, 0x5a, 0x45, 0xfc, 0x5c, 0xdb, 0x24, 0x78, 0x11, 0x7f, 0x48, 0xba, 0xc, 0x16, 0x87, 0x17, 0x8e, 0xf6, 0x9c, 0x1, 0x6b, 0xba, 0x89, 0xd3, 0x42, 0xc1, 0xac, 0xd1, 0x55, 0xe1, 0xf5, 0xae, 0xf, 0x47, 0x27}

	endDriveTransactionSigningCorr = "9A000000DDF875FE60E2D31D4E114C3D6FE218ED83AC496B04AF1F27FE98CC1FA5F071FC0983DC6AC4449A5C218677DED7ACE39A77C0CA15131A5975B55F8910FE611D04CE02704FAB05D5BB8981397D563F7CC9312864F065195E3DB8E0847D9F207921010001905A45000000000000000000BAFD5600000000FC5CDB2478117F48BA0C1687178EF69C016BBA89D342C1ACD155E1F5AE0F4727"

	driveFilesRewardTransactionSerializationCorr = []byte{0xa4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x90, 0x5a, 0x46, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0xfd, 0x56, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0xfc, 0x5c, 0xdb, 0x24, 0x78, 0x11, 0x7f, 0x48, 0xba, 0xc, 0x16, 0x87, 0x17, 0x8e, 0xf6, 0x9c, 0x1, 0x6b, 0xba, 0x89, 0xd3, 0x42, 0xc1, 0xac, 0xd1, 0x55, 0xe1, 0xf5, 0xae, 0xf, 0x47, 0x27, 0x63, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}

	driveFilesRewardTransactionToAggregateCorr = []byte{0x54, 0x0, 0x0, 0x0, 0xce, 0x2, 0x70, 0x4f, 0xab, 0x5, 0xd5, 0xbb, 0x89, 0x81, 0x39, 0x7d, 0x56, 0x3f, 0x7c, 0xc9, 0x31, 0x28, 0x64, 0xf0, 0x65, 0x19, 0x5e, 0x3d, 0xb8, 0xe0, 0x84, 0x7d, 0x9f, 0x20, 0x79, 0x21, 0x1, 0x0, 0x0, 0x90, 0x5a, 0x46, 0x1, 0x0, 0xfc, 0x5c, 0xdb, 0x24, 0x78, 0x11, 0x7f, 0x48, 0xba, 0xc, 0x16, 0x87, 0x17, 0x8e, 0xf6, 0x9c, 0x1, 0x6b, 0xba, 0x89, 0xd3, 0x42, 0xc1, 0xac, 0xd1, 0x55, 0xe1, 0xf5, 0xae, 0xf, 0x47, 0x27, 0x63, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}

	driveFilesRewardTransactionSigningCorr = "A400000008BF6565FC7BFAD7083D36174280D0A45696F4014ED3A509C0FB32B44C3FD87F2C8F6958D4B0BCFA931546B9E677C8C5BB98461C3B36D3FA85A46E0C2205040ECE02704FAB05D5BB8981397D563F7CC9312864F065195E3DB8E0847D9F207921010001905A46000000000000000000BAFD56000000000100FC5CDB2478117F48BA0C1687178EF69C016BBA89D342C1ACD155E1F5AE0F47276300000000000000"

	startDriveVerificationTransactionSerializationCorr = []byte{0x9a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x90, 0x5a, 0x47, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0xfd, 0x56, 0x0, 0x0, 0x0, 0x0, 0xfc, 0x5c, 0xdb, 0x24, 0x78, 0x11, 0x7f, 0x48, 0xba, 0xc, 0x16, 0x87, 0x17, 0x8e, 0xf6, 0x9c, 0x1, 0x6b, 0xba, 0x89, 0xd3, 0x42, 0xc1, 0xac, 0xd1, 0x55, 0xe1, 0xf5, 0xae, 0xf, 0x47, 0x27}

	startDriveVerificationTransactionToAggregateCorr = []byte{0x4a, 0x0, 0x0, 0x0, 0xce, 0x2, 0x70, 0x4f, 0xab, 0x5, 0xd5, 0xbb, 0x89, 0x81, 0x39, 0x7d, 0x56, 0x3f, 0x7c, 0xc9, 0x31, 0x28, 0x64, 0xf0, 0x65, 0x19, 0x5e, 0x3d, 0xb8, 0xe0, 0x84, 0x7d, 0x9f, 0x20, 0x79, 0x21, 0x1, 0x0, 0x0, 0x90, 0x5a, 0x47, 0xfc, 0x5c, 0xdb, 0x24, 0x78, 0x11, 0x7f, 0x48, 0xba, 0xc, 0x16, 0x87, 0x17, 0x8e, 0xf6, 0x9c, 0x1, 0x6b, 0xba, 0x89, 0xd3, 0x42, 0xc1, 0xac, 0xd1, 0x55, 0xe1, 0xf5, 0xae, 0xf, 0x47, 0x27}

	startDriveVerificationTransactionSigningCorr = "9A000000457BD3A987B673F1013FA5DBB2DF75023C1B61E84130D71DBCF3C854A87289EC78881BBABA6D5777170AA0F6A9664D00AB79B289788DB2E95C04218D71D9A801CE02704FAB05D5BB8981397D563F7CC9312864F065195E3DB8E0847D9F207921010001905A47000000000000000000BAFD5600000000FC5CDB2478117F48BA0C1687178EF69C016BBA89D342C1ACD155E1F5AE0F4727"

	endDriveVerificationTransactionSerializationCorr = []byte{0xbe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x90, 0x5a, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0xfd, 0x56, 0x0, 0x0, 0x0, 0x0, 0x44, 0x0, 0x0, 0x0, 0xfc, 0x5c, 0xdb, 0x24, 0x78, 0x11, 0x7f, 0x48, 0xba, 0xc, 0x16, 0x87, 0x17, 0x8e, 0xf6, 0x9c, 0x1, 0x6b, 0xba, 0x89, 0xd3, 0x42, 0xc1, 0xac, 0xd1, 0x55, 0xe1, 0xf5, 0xae, 0xf, 0x47, 0x27, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}

	endDriveVerificationTransactionToAggregateCorr = []byte{0x6e, 0x0, 0x0, 0x0, 0xce, 0x2, 0x70, 0x4f, 0xab, 0x5, 0xd5, 0xbb, 0x89, 0x81, 0x39, 0x7d, 0x56, 0x3f, 0x7c, 0xc9, 0x31, 0x28, 0x64, 0xf0, 0x65, 0x19, 0x5e, 0x3d, 0xb8, 0xe0, 0x84, 0x7d, 0x9f, 0x20, 0x79, 0x21, 0x1, 0x0, 0x0, 0x90, 0x5a, 0x48, 0x44, 0x0, 0x0, 0x0, 0xfc, 0x5c, 0xdb, 0x24, 0x78, 0x11, 0x7f, 0x48, 0xba, 0xc, 0x16, 0x87, 0x17, 0x8e, 0xf6, 0x9c, 0x1, 0x6b, 0xba, 0x89, 0xd3, 0x42, 0xc1, 0xac, 0xd1, 0x55, 0xe1, 0xf5, 0xae, 0xf, 0x47, 0x27, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}

	endDriveVerificationTransactionSigningCorr = "BE000000E2222F9E082909E7BFA2875663ABD28C2384CF5E0F0614F343D1C6B0621EFC689599F03293D5159DE96D245BBA83658FBD2B6C465945D3117E1CFEAB2B80D70DCE02704FAB05D5BB8981397D563F7CC9312864F065195E3DB8E0847D9F207921010001905A48000000000000000000BAFD560000000044000000FC5CDB2478117F48BA0C1687178EF69C016BBA89D342C1ACD155E1F5AE0F47277B00000000000000000000000000000000000000000000000000000000000000"
)

var testDriveOwner, _ = NewAccountFromPrivateKey("9A49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24", MijinTest, &Hash{}, 1)
var testDrive, _ = NewAccountFromPrivateKey("AA49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24", MijinTest, &Hash{}, 1)

func TestPrepareDriveTransactionSerialization(t *testing.T) {
	tx, err := NewPrepareDriveTransaction(
		fakeDeadline,
		testDriveOwner.PublicAccount,
		Duration(1),
		Duration(1),
		Amount(1),
		StorageSize(1),
		uint16(1),
		uint16(1),
		uint8(100),
		MijinTest,
	)
	assert.Nilf(t, err, "NewPrepareDriveTransaction returned error: %s", err)

	b, err := tx.Bytes()

	assert.Nilf(t, err, "PrepareDriveTransaction.Bytes returned error: %s", err)
	assert.Equal(t, prepareDriveTransactionSerializationCorr, b)
}

func TestPrepareDriveTransactionToAggregate(t *testing.T) {
	tx, err := NewPrepareDriveTransaction(
		fakeDeadline,
		testDriveOwner.PublicAccount,
		Duration(1),
		Duration(1),
		Amount(1),
		StorageSize(1),
		uint16(1),
		uint16(1),
		uint8(100),
		MijinTest,
	)
	assert.Nilf(t, err, "NewPrepareDriveTransaction returned error: %s", err)
	tx.Signer = testDriveOwner.PublicAccount

	b, err := toAggregateTransactionBytes(tx)

	assert.Nilf(t, err, "toAggregateTransactionBytes returned error: %s", err)
	assert.Equal(t, prepareDriveTransactionToAggregateCorr, b)
}

func TestPrepareDriveTransactionSigning(t *testing.T) {
	tx, err := NewPrepareDriveTransaction(
		fakeDeadline,
		testDriveOwner.PublicAccount,
		Duration(1),
		Duration(1),
		Amount(1),
		StorageSize(1),
		uint16(1),
		uint16(1),
		uint8(100),
		MijinTest,
	)
	assert.Nilf(t, err, "NewPrepareDriveTransaction returned error: %s", err)

	b, err := testDriveOwner.Sign(tx)

	assert.Nilf(t, err, "Sign returned error: %s", err)
	assert.Equal(t, prepareDriveTransactionSigningCorr, b.Payload)
	assert.Equal(t, stringToHashPanic("3a19dea9eaec36ad61853a8e212e8884d4c7f48ba6afee24aac79a33d62546ce"), b.Hash)
}

func TestJoinToDriveTransactionSerialization(t *testing.T) {
	tx, err := NewJoinToDriveTransaction(
		fakeDeadline,
		testDrive.PublicAccount,
		MijinTest,
	)
	assert.Nilf(t, err, "NewJoinToDriveTransaction returned error: %s", err)

	b, err := tx.Bytes()

	assert.Nilf(t, err, "JoinToDriveTransaction.Bytes returned error: %s", err)
	assert.Equal(t, joinToDriveTransactionSerializationCorr, b)
}

func TestJoinToDriveTransactionToAggregate(t *testing.T) {
	tx, err := NewJoinToDriveTransaction(
		fakeDeadline,
		testDrive.PublicAccount,
		MijinTest,
	)
	assert.Nilf(t, err, "NewJoinToDriveTransaction returned error: %s", err)
	tx.Signer = testDriveOwner.PublicAccount

	b, err := toAggregateTransactionBytes(tx)

	assert.Nilf(t, err, "toAggregateTransactionBytes returned error: %s", err)
	assert.Equal(t, joinToDriveTransactionToAggregateCorr, b)
}

func TestJoinToDriveTransactionSigning(t *testing.T) {
	tx, err := NewJoinToDriveTransaction(
		fakeDeadline,
		testDrive.PublicAccount,
		MijinTest,
	)
	assert.Nilf(t, err, "NewJoinToDriveTransaction returned error: %s", err)
	assert.Nilf(t, err, "NewJoinToDriveTransaction returned error: %s", err)

	b, err := testDriveOwner.Sign(tx)

	assert.Nilf(t, err, "Sign returned error: %s", err)
	assert.Equal(t, joinToDriveTransactionSigningCorr, b.Payload)
	assert.Equal(t, stringToHashPanic("f5cb004e54f16ba0f8b5883d027d94a8ca3606f7c16333a29a71a7653f425b0a"), b.Hash)
}

func TestDriveFileSystemTransactionSerialization(t *testing.T) {
	tx, err := NewDriveFileSystemTransaction(
		fakeDeadline,
		testDrive.PublicAccount.PublicKey,
		&Hash{0},
		&Hash{1},
		[]*Action{
			{
				FileSize: 8,
				FileHash: &Hash{3},
			},
		},
		[]*Action{
			{
				FileSize: 9,
				FileHash: &Hash{4},
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewDriveFileSystemTransaction returned error: %s", err)

	b, err := tx.Bytes()

	assert.Nilf(t, err, "DriveFileSystemTransaction.Bytes returned error: %s", err)
	assert.Equal(t, driveFileSystemTransactionSerializationCorr, b)
}

func TestDriveFileSystemTransactionToAggregate(t *testing.T) {
	tx, err := NewDriveFileSystemTransaction(
		fakeDeadline,
		testDrive.PublicAccount.PublicKey,
		&Hash{0},
		&Hash{1},
		[]*Action{
			{
				FileSize: 8,
				FileHash: &Hash{3},
			},
		},
		[]*Action{
			{
				FileSize: 9,
				FileHash: &Hash{4},
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewDriveFileSystemTransaction returned error: %s", err)
	tx.Signer = testDriveOwner.PublicAccount

	b, err := toAggregateTransactionBytes(tx)

	assert.Nilf(t, err, "toAggregateTransactionBytes returned error: %s", err)
	assert.Equal(t, driveFileSystemTransactionToAggregateCorr, b)
}

func TestDriveFileSystemTransactionSigning(t *testing.T) {
	tx, err := NewDriveFileSystemTransaction(
		fakeDeadline,
		testDrive.PublicAccount.PublicKey,
		&Hash{0},
		&Hash{1},
		[]*Action{
			{
				FileSize: 8,
				FileHash: &Hash{3},
			},
		},
		[]*Action{
			{
				FileSize: 9,
				FileHash: &Hash{4},
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewDriveFileSystemTransaction returned error: %s", err)

	b, err := testDriveOwner.Sign(tx)

	assert.Nilf(t, err, "Sign returned error: %s", err)
	assert.Equal(t, driveFileSystemTransactionSigningCorr, b.Payload)
	assert.Equal(t, stringToHashPanic("34116c2b558621074811215bb2dfcf05b8aebecb5f20246579012ed28818af3c"), b.Hash)
}

func TestFilesDepositTransactionSerialization(t *testing.T) {
	tx, err := NewFilesDepositTransaction(
		fakeDeadline,
		testDrive.PublicAccount,
		[]*File{
			{
				FileHash: testFileHash,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewFilesDepositTransaction returned error: %s", err)

	b, err := tx.Bytes()

	assert.Nilf(t, err, "FilesDepositTransaction.Bytes returned error: %s", err)
	assert.Equal(t, filesDepositTransactionSerializationCorr, b)
}

func TestFilesDepositTransactionToAggregate(t *testing.T) {
	tx, err := NewFilesDepositTransaction(
		fakeDeadline,
		testDrive.PublicAccount,
		[]*File{
			{
				FileHash: testFileHash,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewFilesDepositTransaction returned error: %s", err)
	tx.Signer = testDriveOwner.PublicAccount

	b, err := toAggregateTransactionBytes(tx)

	assert.Nilf(t, err, "toAggregateTransactionBytes returned error: %s", err)
	assert.Equal(t, filesDepositTransactionToAggregateCorr, b)
}

func TestFilesDepositTransactionSigning(t *testing.T) {
	tx, err := NewFilesDepositTransaction(
		fakeDeadline,
		testDrive.PublicAccount,
		[]*File{
			{
				FileHash: testFileHash,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewFilesDepositTransaction returned error: %s", err)

	b, err := testDriveOwner.Sign(tx)

	assert.Nilf(t, err, "Sign returned error: %s", err)
	assert.Equal(t, filesDepositTransactionSigningCorr, b.Payload)
	assert.Equal(t, stringToHashPanic("2102d5f4a8ff9512e370396b83b97afcf1fd70dc1da27f0b9e9cef5d295d5228"), b.Hash)
}

func TestEndDriveTransactionSerialization(t *testing.T) {
	tx, err := NewEndDriveTransaction(
		fakeDeadline,
		testDrive.PublicAccount,
		MijinTest,
	)
	assert.Nilf(t, err, "NewEndDriveTransaction returned error: %s", err)

	b, err := tx.Bytes()

	assert.Nilf(t, err, "EndDriveTransaction.Bytes returned error: %s", err)
	assert.Equal(t, endDriveTransactionSerializationCorr, b)
}

func TestEndDriveTransactionToAggregate(t *testing.T) {
	tx, err := NewEndDriveTransaction(
		fakeDeadline,
		testDrive.PublicAccount,
		MijinTest,
	)
	assert.Nilf(t, err, "NewEndDriveTransaction returned error: %s", err)
	tx.Signer = testDriveOwner.PublicAccount

	b, err := toAggregateTransactionBytes(tx)

	assert.Nilf(t, err, "toAggregateTransactionBytes returned error: %s", err)
	assert.Equal(t, endDriveTransactionToAggregateCorr, b)
}

func TestEndDriveTransactionSigning(t *testing.T) {
	tx, err := NewEndDriveTransaction(
		fakeDeadline,
		testDrive.PublicAccount,
		MijinTest,
	)
	assert.Nilf(t, err, "NewEndDriveTransaction returned error: %s", err)

	b, err := testDriveOwner.Sign(tx)

	assert.Nilf(t, err, "Sign returned error: %s", err)
	assert.Equal(t, endDriveTransactionSigningCorr, b.Payload)
	assert.Equal(t, stringToHashPanic("9c5d186e21c3ba4bbb1ec2e6ce93d1942c16066f26550dfd76fd30478e034c51"), b.Hash)
}

func TestDriveFilesRewardTransactionSerialization(t *testing.T) {
	tx, err := NewDriveFilesRewardTransaction(
		fakeDeadline,
		[]*UploadInfo{
			{
				Participant:  testDrive.PublicAccount,
				UploadedSize: 99,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewDriveFilesRewardTransaction returned error: %s", err)

	b, err := tx.Bytes()

	assert.Nilf(t, err, "DriveFilesRewardTransaction.Bytes returned error: %s", err)
	assert.Equal(t, driveFilesRewardTransactionSerializationCorr, b)
}

func TestDriveFilesRewardTransactionToAggregate(t *testing.T) {
	tx, err := NewDriveFilesRewardTransaction(
		fakeDeadline,
		[]*UploadInfo{
			{
				Participant:  testDrive.PublicAccount,
				UploadedSize: 99,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewDriveFilesRewardTransaction returned error: %s", err)
	tx.Signer = testDriveOwner.PublicAccount

	b, err := toAggregateTransactionBytes(tx)

	assert.Nilf(t, err, "toAggregateTransactionBytes returned error: %s", err)
	assert.Equal(t, driveFilesRewardTransactionToAggregateCorr, b)
}

func TestDriveFilesRewardTransactionSigning(t *testing.T) {
	tx, err := NewDriveFilesRewardTransaction(
		fakeDeadline,
		[]*UploadInfo{
			{
				Participant:  testDrive.PublicAccount,
				UploadedSize: 99,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewDriveFilesRewardTransaction returned error: %s", err)

	b, err := testDriveOwner.Sign(tx)

	assert.Nilf(t, err, "Sign returned error: %s", err)
	assert.Equal(t, driveFilesRewardTransactionSigningCorr, b.Payload)
	assert.Equal(t, stringToHashPanic("9ce24e9b44b9a666700b9cf823206985ce8ebc5752d79ee9404207749f78f53b"), b.Hash)
}

func TestStartDriveVerificationTransactionSerialization(t *testing.T) {
	tx, err := NewStartDriveVerificationTransaction(
		fakeDeadline,
		testDrive.PublicAccount,
		MijinTest,
	)
	assert.Nilf(t, err, "NewStartDriveVerificationTransaction returned error: %s", err)

	b, err := tx.Bytes()

	assert.Nilf(t, err, "StartDriveVerificationTransaction.Bytes returned error: %s", err)
	assert.Equal(t, startDriveVerificationTransactionSerializationCorr, b)
}

func TestStartDriveVerificationTransactionToAggregate(t *testing.T) {
	tx, err := NewStartDriveVerificationTransaction(
		fakeDeadline,
		testDrive.PublicAccount,
		MijinTest,
	)
	assert.Nilf(t, err, "NewStartDriveVerificationTransaction returned error: %s", err)
	tx.Signer = testDriveOwner.PublicAccount

	b, err := toAggregateTransactionBytes(tx)

	assert.Nilf(t, err, "toAggregateTransactionBytes returned error: %s", err)
	assert.Equal(t, startDriveVerificationTransactionToAggregateCorr, b)
}

func TestStartDriveVerificationTransactionSigning(t *testing.T) {
	tx, err := NewStartDriveVerificationTransaction(
		fakeDeadline,
		testDrive.PublicAccount,
		MijinTest,
	)
	assert.Nilf(t, err, "NewStartDriveVerificationTransaction returned error: %s", err)

	b, err := testDriveOwner.Sign(tx)

	assert.Nilf(t, err, "Sign returned error: %s", err)
	assert.Equal(t, startDriveVerificationTransactionSigningCorr, b.Payload)
	assert.Equal(t, stringToHashPanic("08f2a98e27c9179fdc5f8c75c09c00cedf8d137f64529cb3a15ea1062513a012"), b.Hash)
}

func TestEndDriveVerificationTransactionSerialization(t *testing.T) {
	tx, err := NewEndDriveVerificationTransaction(
		fakeDeadline,
		[]*FailureVerification{
			{
				Replicator:  testDrive.PublicAccount,
				BlochHashes: []*Hash{{123}},
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewEndDriveVerificationTransaction returned error: %s", err)

	b, err := tx.Bytes()

	assert.Nilf(t, err, "EndDriveVerificationTransaction.Bytes returned error: %s", err)
	assert.Equal(t, endDriveVerificationTransactionSerializationCorr, b)
}

func TestEndDriveVerificationTransactionToAggregate(t *testing.T) {
	tx, err := NewEndDriveVerificationTransaction(
		fakeDeadline,
		[]*FailureVerification{
			{
				Replicator:  testDrive.PublicAccount,
				BlochHashes: []*Hash{{123}},
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewEndDriveVerificationTransaction returned error: %s", err)
	tx.Signer = testDriveOwner.PublicAccount

	b, err := toAggregateTransactionBytes(tx)

	assert.Nilf(t, err, "toAggregateTransactionBytes returned error: %s", err)
	assert.Equal(t, endDriveVerificationTransactionToAggregateCorr, b)
}

func TestEndDriveVerificationTransactionSigning(t *testing.T) {
	tx, err := NewEndDriveVerificationTransaction(
		fakeDeadline,
		[]*FailureVerification{
			{
				Replicator:  testDrive.PublicAccount,
				BlochHashes: []*Hash{{123}},
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewEndDriveVerificationTransaction returned error: %s", err)

	b, err := testDriveOwner.Sign(tx)

	assert.Nilf(t, err, "Sign returned error: %s", err)
	assert.Equal(t, endDriveVerificationTransactionSigningCorr, b.Payload)
	assert.Equal(t, stringToHashPanic("644af71f605792a5907e17bdee543a5ece5b3203c21f2e00177f4d514cbefba5"), b.Hash)
}
