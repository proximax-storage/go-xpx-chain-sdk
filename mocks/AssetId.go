// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	sdk "github.com/proximax-storage/go-xpx-chain-sdk/sdk"
	mock "github.com/stretchr/testify/mock"
)

// AssetId is an autogenerated mock type for the AssetId type
type AssetId struct {
	mock.Mock
}

// Equals provides a mock function with given fields: _a0
func (_m *AssetId) Equals(_a0 sdk.AssetId) (bool, error) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(sdk.AssetId) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(sdk.AssetId) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Id provides a mock function with given fields:
func (_m *AssetId) Id() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *AssetId) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *AssetId) Type() sdk.AssetIdType {
	ret := _m.Called()

	var r0 sdk.AssetIdType
	if rf, ok := ret.Get(0).(func() sdk.AssetIdType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(sdk.AssetIdType)
	}

	return r0
}

// toArray provides a mock function with given fields:
func (_m *AssetId) toArray() [2]uint32 {
	ret := _m.Called()

	var r0 [2]uint32
	if rf, ok := ret.Get(0).(func() [2]uint32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([2]uint32)
		}
	}

	return r0
}

// toLittleEndian provides a mock function with given fields:
func (_m *AssetId) toLittleEndian() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}
