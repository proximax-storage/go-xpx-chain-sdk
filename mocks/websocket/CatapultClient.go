// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	sdk "github.com/proximax-storage/go-xpx-chain-sdk/sdk"
	subscribers "github.com/proximax-storage/go-xpx-chain-sdk/sdk/websocket/subscribers"
	mock "github.com/stretchr/testify/mock"
)

// CatapultClient is an autogenerated mock type for the CatapultClient type
type CatapultClient struct {
	mock.Mock
}

// AddBlockHandlers provides a mock function with given fields: handlers
func (_m *CatapultClient) AddBlockHandlers(handlers ...subscribers.BlockHandler) error {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...subscribers.BlockHandler) error); ok {
		r0 = rf(handlers...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddConfirmedAddedHandlers provides a mock function with given fields: address, handlers
func (_m *CatapultClient) AddConfirmedAddedHandlers(address *sdk.Address, handlers ...subscribers.ConfirmedAddedHandler) error {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, address)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sdk.Address, ...subscribers.ConfirmedAddedHandler) error); ok {
		r0 = rf(address, handlers...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddConfirmedAddedHandlersByHandle provides a mock function with given fields: handle, handlers
func (_m *CatapultClient) AddConfirmedAddedHandlersByHandle(handle *sdk.CompoundChannelHandle, handlers ...subscribers.ConfirmedAddedHandler) error {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, handle)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sdk.CompoundChannelHandle, ...subscribers.ConfirmedAddedHandler) error); ok {
		r0 = rf(handle, handlers...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddCosignatureHandlers provides a mock function with given fields: address, handlers
func (_m *CatapultClient) AddCosignatureHandlers(address *sdk.Address, handlers ...subscribers.CosignatureHandler) error {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, address)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sdk.Address, ...subscribers.CosignatureHandler) error); ok {
		r0 = rf(address, handlers...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddDriveStateHandlers provides a mock function with given fields: address, handlers
func (_m *CatapultClient) AddDriveStateHandlers(address *sdk.Address, handlers ...subscribers.DriveStateHandler) error {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, address)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sdk.Address, ...subscribers.DriveStateHandler) error); ok {
		r0 = rf(address, handlers...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddPartialAddedHandlers provides a mock function with given fields: address, handlers
func (_m *CatapultClient) AddPartialAddedHandlers(address *sdk.Address, handlers ...subscribers.PartialAddedHandler) error {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, address)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sdk.Address, ...subscribers.PartialAddedHandler) error); ok {
		r0 = rf(address, handlers...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddPartialAddedHandlersByHandle provides a mock function with given fields: handle, handlers
func (_m *CatapultClient) AddPartialAddedHandlersByHandle(handle *sdk.CompoundChannelHandle, handlers ...subscribers.PartialAddedHandler) error {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, handle)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sdk.CompoundChannelHandle, ...subscribers.PartialAddedHandler) error); ok {
		r0 = rf(handle, handlers...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddPartialRemovedHandlers provides a mock function with given fields: address, handlers
func (_m *CatapultClient) AddPartialRemovedHandlers(address *sdk.Address, handlers ...subscribers.PartialRemovedHandler) error {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, address)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sdk.Address, ...subscribers.PartialRemovedHandler) error); ok {
		r0 = rf(address, handlers...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddPartialRemovedHandlersByHandle provides a mock function with given fields: handle, handlers
func (_m *CatapultClient) AddPartialRemovedHandlersByHandle(handle *sdk.CompoundChannelHandle, handlers ...subscribers.PartialRemovedHandler) error {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, handle)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sdk.CompoundChannelHandle, ...subscribers.PartialRemovedHandler) error); ok {
		r0 = rf(handle, handlers...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddPublicKeyStatementHandlers provides a mock function with given fields: entityType, handlers
func (_m *CatapultClient) AddPublicKeyStatementHandlers(entityType *sdk.EntityType, handlers ...subscribers.ReceiptHandler) error {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, entityType)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sdk.EntityType, ...subscribers.ReceiptHandler) error); ok {
		r0 = rf(entityType, handlers...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddStateStatementHandlers provides a mock function with given fields: entityType, handlers
func (_m *CatapultClient) AddStateStatementHandlers(entityType *sdk.EntityType, handlers ...subscribers.ReceiptHandler) error {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, entityType)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sdk.EntityType, ...subscribers.ReceiptHandler) error); ok {
		r0 = rf(entityType, handlers...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddStatusHandlers provides a mock function with given fields: address, handlers
func (_m *CatapultClient) AddStatusHandlers(address *sdk.Address, handlers ...subscribers.StatusHandler) error {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, address)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sdk.Address, ...subscribers.StatusHandler) error); ok {
		r0 = rf(address, handlers...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUnconfirmedAddedHandlers provides a mock function with given fields: address, handlers
func (_m *CatapultClient) AddUnconfirmedAddedHandlers(address *sdk.Address, handlers ...subscribers.UnconfirmedAddedHandler) error {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, address)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sdk.Address, ...subscribers.UnconfirmedAddedHandler) error); ok {
		r0 = rf(address, handlers...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUnconfirmedAddedHandlersByHandle provides a mock function with given fields: handle, handlers
func (_m *CatapultClient) AddUnconfirmedAddedHandlersByHandle(handle *sdk.CompoundChannelHandle, handlers ...subscribers.UnconfirmedAddedHandler) error {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, handle)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sdk.CompoundChannelHandle, ...subscribers.UnconfirmedAddedHandler) error); ok {
		r0 = rf(handle, handlers...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUnconfirmedRemovedHandlers provides a mock function with given fields: address, handlers
func (_m *CatapultClient) AddUnconfirmedRemovedHandlers(address *sdk.Address, handlers ...subscribers.UnconfirmedRemovedHandler) error {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, address)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sdk.Address, ...subscribers.UnconfirmedRemovedHandler) error); ok {
		r0 = rf(address, handlers...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUnconfirmedRemovedHandlersByHandle provides a mock function with given fields: handle, handlers
func (_m *CatapultClient) AddUnconfirmedRemovedHandlersByHandle(handle *sdk.CompoundChannelHandle, handlers ...subscribers.UnconfirmedRemovedHandler) error {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, handle)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sdk.CompoundChannelHandle, ...subscribers.UnconfirmedRemovedHandler) error); ok {
		r0 = rf(handle, handlers...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *CatapultClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Config provides a mock function with given fields:
func (_m *CatapultClient) Config() *sdk.Config {
	ret := _m.Called()

	var r0 *sdk.Config
	if rf, ok := ret.Get(0).(func() *sdk.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdk.Config)
		}
	}

	return r0
}

// Listen provides a mock function with given fields:
func (_m *CatapultClient) Listen() {
	_m.Called()
}

type mockConstructorTestingTNewCatapultClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewCatapultClient creates a new instance of CatapultClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCatapultClient(t mockConstructorTestingTNewCatapultClient) *CatapultClient {
	mock := &CatapultClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
