// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	subscribers "github.com/proximax-storage/go-xpx-chain-sdk/sdk/websocket/subscribers"
	mock "github.com/stretchr/testify/mock"
)

// Block is an autogenerated mock type for the Block type
type Block struct {
	mock.Mock
}

// AddHandlers provides a mock function with given fields: handlers
func (_m *Block) AddHandlers(handlers ...subscribers.BlockHandler) error {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...subscribers.BlockHandler) error); ok {
		r0 = rf(handlers...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetHandlers provides a mock function with given fields:
func (_m *Block) GetHandlers() []*subscribers.BlockHandler {
	ret := _m.Called()

	var r0 []*subscribers.BlockHandler
	if rf, ok := ret.Get(0).(func() []*subscribers.BlockHandler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*subscribers.BlockHandler)
		}
	}

	return r0
}

// HasHandlers provides a mock function with given fields:
func (_m *Block) HasHandlers() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RemoveHandlers provides a mock function with given fields: handlers
func (_m *Block) RemoveHandlers(handlers ...*subscribers.BlockHandler) bool {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(...*subscribers.BlockHandler) bool); ok {
		r0 = rf(handlers...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
