// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	websocket "github.com/proximax-storage/go-xpx-chain-sdk/sdk/websocket"
	mock "github.com/stretchr/testify/mock"
)

// TopicHandlersStorage is an autogenerated mock type for the TopicHandlersStorage type
type TopicHandlersStorage struct {
	mock.Mock
}

// GetHandler provides a mock function with given fields: path
func (_m *TopicHandlersStorage) GetHandler(path websocket.Path) *websocket.TopicHandler {
	ret := _m.Called(path)

	var r0 *websocket.TopicHandler
	if rf, ok := ret.Get(0).(func(websocket.Path) *websocket.TopicHandler); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*websocket.TopicHandler)
		}
	}

	return r0
}

// HasHandler provides a mock function with given fields: path
func (_m *TopicHandlersStorage) HasHandler(path websocket.Path) bool {
	ret := _m.Called(path)

	var r0 bool
	if rf, ok := ret.Get(0).(func(websocket.Path) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetTopicHandler provides a mock function with given fields: path, handler
func (_m *TopicHandlersStorage) SetTopicHandler(path websocket.Path, handler *websocket.TopicHandler) {
	_m.Called(path, handler)
}

type mockConstructorTestingTNewTopicHandlersStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewTopicHandlersStorage creates a new instance of TopicHandlersStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTopicHandlersStorage(t mockConstructorTestingTNewTopicHandlersStorage) *TopicHandlersStorage {
	mock := &TopicHandlersStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
